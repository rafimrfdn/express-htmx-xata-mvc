import { BaseCommand } from '../../base.js';
import { ProjectConfig } from '../../config.js';
export declare const languages: Record<string, 'javascript' | 'typescript'>;
export declare const unsupportedExtensionError: (ext: string) => string;
export default class Codegen extends BaseCommand<typeof Codegen> {
    static description: string;
    static examples: never[];
    static flags: {
        branch: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        output: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        declarations: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        'inject-branch': import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        'javascript-output-target': import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'worker-id': import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'experimental-incremental-build': import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        db: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        json: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
    };
    static args: {};
    run(): Promise<void>;
    static runIfConfigured(projectConfig?: ProjectConfig, flags?: any[]): Promise<void>;
}
