import { BaseCommand } from '../../base.js';
type PackageManager = {
    command: string;
    args: string;
};
export default class Init extends BaseCommand<typeof Init> {
    static description: string;
    static examples: string[];
    static flags: {
        sdk: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        codegen: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        module: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        declarations: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        schema: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'package-manager': import("@oclif/core/lib/interfaces/parser.js").OptionFlag<"bun" | "pnpm" | "npm" | "yarn" | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'no-delay': import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        yes: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        force: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        db: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
    };
    static args: {};
    run(): Promise<void>;
    delay(milliseconds: number): Promise<unknown>;
    configureCodegen(): Promise<{
        shouldInstallPackage: string | boolean;
    }>;
    getPackageManager(): Promise<{
        command: string;
        args: string;
    } | null>;
    guessPackageManager(): Promise<{
        command: string;
        args: string;
    } | null>;
    access(path: string): Promise<boolean>;
    installPackage(packageManager: PackageManager, pkg: string): Promise<void>;
    writeConfig(): Promise<void>;
    findEnvFile(): Promise<string>;
    writeEnvFile(workspace: string, region: string, database: string, branch: string): Promise<void>;
    waitUntilAPIKeyIsValid(workspace: string, region: string, database: string): Promise<void>;
    ignoreEnvFile(): Promise<void>;
    promptIgnoreEnvFile(): Promise<boolean | undefined>;
    readSchema(file: string): Promise<{
        tables: {
            name: string;
            columns: import("@xata.io/codegen").Column[];
            revLinks?: {
                table: string;
                column: string;
            }[] | undefined;
        }[];
    }>;
    parseSchema(file: string): Promise<{
        tables: {
            name: string;
            columns: import("@xata.io/codegen").Column[];
            revLinks?: {
                table: string;
                column: string;
            }[] | undefined;
        }[];
    }>;
}
export {};
