var _a;
import { Args, Flags } from '@oclif/core';
import { BaseCommand } from '../../base.js';
class BranchCreate extends BaseCommand {
    async run() {
        const { args, flags } = await this.parseCommand();
        const { branch } = args;
        const { workspace, region, database } = await this.getParsedDatabaseURL(flags.db);
        const xata = await this.getXataClient();
        const { from } = flags;
        try {
            const result = await xata.api.branches.createBranch({ workspace, region, database, branch, from });
            if (this.jsonEnabled())
                return result;
            const message = `Branch ${branch} successfully created`;
            this.success(message);
        }
        catch (err) {
            err instanceof Error
                ? this.error(`${err.message.includes('Unexpected token < in JSON') ? 'Failed to create branch' : err.message}`)
                : this.error(String(err));
        }
    }
}
_a = BranchCreate;
BranchCreate.description = 'Create a branch';
BranchCreate.examples = [];
BranchCreate.flags = {
    ..._a.commonFlags,
    ..._a.databaseURLFlag,
    from: Flags.string({
        description: 'Branch name to branch off from',
        default: 'main'
    })
};
BranchCreate.args = {
    branch: Args.string({ description: 'The new branch name', required: true })
};
BranchCreate.enableJsonFlag = true;
export default BranchCreate;
