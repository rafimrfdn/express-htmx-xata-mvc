/// <reference types="node" />
import { Column } from '@xata.io/codegen';
import { BaseCommand } from '../../base.js';
export default class ImportCSV extends BaseCommand<typeof ImportCSV> {
    static description: string;
    static examples: string[];
    static flags: {
        branch: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        table: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        types: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        columns: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'no-header': import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        create: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        'batch-size': import("@oclif/core/lib/interfaces/parser.js").OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'max-rows': import("@oclif/core/lib/interfaces/parser.js").OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        delimiter: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'delimiters-to-guess': import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        'null-value': import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string[] | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        encoding: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<BufferEncoding | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        force: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        db: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
    };
    static args: {
        file: import("@oclif/core/lib/interfaces/parser.js").Arg<string, Record<string, unknown>>;
    };
    run(): Promise<void>;
    databaseInfo: Awaited<ReturnType<typeof this.getParsedDatabaseURLWithBranch>> | null;
    parseDatabase(): Promise<{
        branch: string;
        source: "env" | "flag" | "config" | "interactive";
        databaseURL: string;
        protocol: string;
        host: string;
        database: string;
        workspace: string;
        region: string;
    }>;
    migrateSchema({ table, columns, create }: {
        table: string;
        columns: Column[];
        create: boolean;
    }): Promise<void>;
}
export declare function splitCommas(value: unknown): string[];
