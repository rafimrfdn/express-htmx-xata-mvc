import { Schemas } from '@xata.io/client';
import { BaseCommand } from '../../base.js';
type Schema = Schemas.Schema;
type Table = Schema['tables'][0];
type Column = Table['columns'][0];
type EditableColumn = Column & {
    added?: boolean;
    deleted?: boolean;
    initialName?: string;
    description?: string;
};
type EditableTable = Table & {
    added?: string;
    deleted?: boolean;
    initialName?: string;
    columns: EditableColumn[];
};
type SelectChoice = {
    name: {
        type: 'space' | 'schema' | 'add-table' | 'migrate';
    } | {
        type: 'add-column' | 'edit-table';
        table: EditableTable;
    } | {
        type: 'edit-column';
        table: EditableTable;
        column: EditableColumn;
    };
    message: string;
    role?: string;
    choices?: SelectChoice[];
    disabled?: boolean;
    hint?: string;
};
export default class EditSchema extends BaseCommand<typeof EditSchema> {
    static description: string;
    static examples: never[];
    static flags: {
        branch: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        source: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        db: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
    };
    static args: {};
    branchDetails: Schemas.DBBranch | undefined;
    tables: EditableTable[];
    workspace: string;
    region: string;
    database: string;
    branch: string;
    selectItem: EditableColumn | EditableTable | null;
    run(): Promise<void>;
    showSourceEditing(branchDetails: Schemas.DBBranch): Promise<void>;
    showInteractiveEditing(branchDetails: Schemas.DBBranch): Promise<void>;
    showSchema(): Promise<void>;
    createSpace(): SelectChoice;
    getMessageForTable(table: EditableTable): string;
    getMessageForColumn(table: EditableTable, column: EditableColumn): string;
    getOverview(): string;
    showColumnEdit(column: EditableColumn | null, table: EditableTable): Promise<void>;
    showTableEdit(table: EditableTable | null): Promise<void>;
    deleteTable(table: EditableTable): Promise<void>;
    deleteColumn(column: EditableColumn, table: EditableTable): Promise<void>;
    clear(): void;
    migrate(): Promise<void>;
}
export {};
