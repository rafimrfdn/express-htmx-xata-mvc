var _a;
import { Flags, ux } from '@oclif/core';
import { writeFile } from 'fs/promises';
import { BaseCommand } from '../../base.js';
import { getBranchDetailsWithPgRoll } from '../../migrations/pgroll.js';
class SchemaDump extends BaseCommand {
    async run() {
        const { flags } = await this.parseCommand();
        const { workspace, region, database, branch } = await this.getParsedDatabaseURLWithBranch(flags.db, flags.branch);
        const xata = await this.getXataClient();
        const branchDetails = await getBranchDetailsWithPgRoll(xata, { workspace, region, database, branch });
        if (!branchDetails)
            return this.error('Could not resolve the current branch');
        if (!flags.file) {
            ux.styledJSON(branchDetails.schema);
            return branchDetails.schema;
        }
        await writeFile(flags.file, JSON.stringify(branchDetails.schema, null, 2));
    }
}
_a = SchemaDump;
SchemaDump.description = 'Dump the schema as a JSON file';
SchemaDump.examples = [];
SchemaDump.flags = {
    ..._a.databaseURLFlag,
    branch: _a.branchFlag,
    file: Flags.string({ char: 'f', description: 'File to write the schema to' })
};
SchemaDump.args = {};
export default SchemaDump;
