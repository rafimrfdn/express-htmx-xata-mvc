import { parseProviderString } from '@xata.io/client';
import { mkdir, readFile, writeFile } from 'fs/promises';
import ini from 'ini';
import { homedir } from 'os';
import path, { dirname } from 'path';
import z from 'zod';
const credentialSchema = z.object({
    api: z.string().optional(),
    web: z.string().optional(),
    apiKey: z.string()
});
const credentialsDictionarySchema = z.record(credentialSchema);
export const credentialsFilePath = path.join(homedir(), '.config', 'xata', 'credentials');
export async function readCredentialsDictionary() {
    const content = await readCredentialsFile();
    if (!content)
        return {};
    const credentials = (() => {
        try {
            return ini.parse(content);
        }
        catch (err) {
            console.error(`Error parsing credentials file ${err}`);
            return {};
        }
    })();
    if (!credentials)
        return {};
    const result = credentialsDictionarySchema.safeParse(credentials);
    if (!result.success) {
        console.log(content, credentials);
        console.error(`Malformed credentials file ${result.error}`);
        return {};
    }
    return result.data;
}
async function readCredentialsFile() {
    try {
        return await readFile(credentialsFilePath, 'utf-8');
    }
    catch (err) {
        return null;
    }
}
export async function hasProfile(profile) {
    const credentials = await readCredentialsDictionary();
    return !!credentials[profile];
}
async function writeCredentials(credentials) {
    const dir = dirname(credentialsFilePath);
    await mkdir(dir, { recursive: true });
    await writeFile(credentialsFilePath, ini.stringify(credentials), { mode: 0o600 });
}
export async function setProfile(name, profile) {
    const credentials = await readCredentialsDictionary();
    credentials[name] = {
        apiKey: profile.apiKey,
        ...Object.fromEntries(Object.entries(profile).filter(([, value]) => value))
    };
    await writeCredentials(credentials);
}
export async function removeProfile(name) {
    const credentials = await readCredentialsDictionary();
    if (credentials[name])
        delete credentials[name];
    await writeCredentials(credentials);
}
export function getEnvProfileName() {
    return process.env.XATA_PROFILE || 'default';
}
export function buildProfile(base) {
    var _a, _b, _c, _d, _e, _f;
    return {
        name: base.name,
        apiKey: (_b = (_a = base.apiKey) !== null && _a !== void 0 ? _a : process.env.XATA_API_KEY) !== null && _b !== void 0 ? _b : '',
        web: (_d = (_c = base.web) !== null && _c !== void 0 ? _c : process.env.XATA_WEB_URL) !== null && _d !== void 0 ? _d : 'https://app.xata.io',
        host: (_f = parseProviderString((_e = base.api) !== null && _e !== void 0 ? _e : process.env.XATA_API_PROVIDER)) !== null && _f !== void 0 ? _f : 'production'
    };
}
