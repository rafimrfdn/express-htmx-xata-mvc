import { HostProvider } from '@xata.io/client';
import z from 'zod';
declare const credentialSchema: z.ZodObject<{
    api: z.ZodOptional<z.ZodString>;
    web: z.ZodOptional<z.ZodString>;
    apiKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    api?: string | undefined;
    web?: string | undefined;
}, {
    apiKey: string;
    api?: string | undefined;
    web?: string | undefined;
}>;
declare const credentialsDictionarySchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    api: z.ZodOptional<z.ZodString>;
    web: z.ZodOptional<z.ZodString>;
    apiKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    api?: string | undefined;
    web?: string | undefined;
}, {
    apiKey: string;
    api?: string | undefined;
    web?: string | undefined;
}>>;
export type Credential = z.infer<typeof credentialSchema>;
export type CredentialsDictionary = z.infer<typeof credentialsDictionarySchema>;
export declare const credentialsFilePath: string;
export type Profile = {
    name: string;
    apiKey: string;
    web: string;
    host: HostProvider;
};
export declare function readCredentialsDictionary(): Promise<CredentialsDictionary>;
export declare function hasProfile(profile: string): Promise<boolean>;
export declare function setProfile(name: string, profile: Credential): Promise<void>;
export declare function removeProfile(name: string): Promise<void>;
export declare function getEnvProfileName(): string;
export declare function buildProfile(base: Partial<Credential> & {
    name: string;
}): Profile;
export {};
