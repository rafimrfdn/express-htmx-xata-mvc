import { columnSchema } from '@xata.io/codegen';
import { PgRollMigrationDefinition } from '@xata.io/pgroll';
import z from 'zod';
const addTable = z.object({
    addTable: z.object({ table: z.string() })
});
const removeTable = z.object({
    removeTable: z.object({ table: z.string() })
});
const renameTable = z.object({
    renameTable: z.object({
        oldName: z.string(),
        newName: z.string()
    })
});
const migrationTableOp = z.union([addTable, removeTable, renameTable]);
const addColumn = z.object({
    addColumn: z.object({ table: z.string(), column: columnSchema })
});
const removeColumn = z.object({
    removeColumn: z.object({ table: z.string(), column: z.string() })
});
const renameColumn = z.object({
    renameColumn: z.object({ table: z.string(), oldName: z.string(), newName: z.string() })
});
const migrationColumnOp = z.union([
    addColumn,
    removeColumn,
    renameColumn
]);
const migrationOperation = z.union([migrationTableOp, migrationColumnOp]);
export const migrationFile = z.object({
    id: z.string(),
    title: z.string().optional(),
    message: z.string().optional(),
    parentID: z.string().optional(),
    checksum: z.string(),
    operations: z.array(migrationOperation)
});
export const migrationFilePgroll = z.object({
    name: z.string(),
    startedAt: z.string(),
    parent: z.string().optional(),
    migration: PgRollMigrationDefinition,
    done: z.boolean(),
    migrationType: z.enum(['pgroll', 'inferred'])
});
