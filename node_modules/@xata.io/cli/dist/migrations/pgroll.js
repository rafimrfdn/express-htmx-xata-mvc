import { migrationsDir, readMigrationsDir } from './files.js';
import path from 'path';
import { safeJSONParse, safeReadFile } from '../utils/files.js';
import { migrationFilePgroll } from './schema.js';
export const isBranchPgRollEnabled = (details) => {
    // @ts-expect-error TODO: Fix this when api is finalized
    return !!details.usePgRoll;
};
export const isMigrationPgRollFormat = (migration) => {
    return 'migration' in migration;
};
export const hydrateMigrationObject = (migration) => {
    return { ...migration, migration: JSON.parse(migration.migration) };
};
export async function allMigrationsPgRollFormat() {
    const files = await readMigrationsDir();
    for (const file of files) {
        if (file === '.ledger')
            continue;
        const filePath = path.join(migrationsDir, file);
        const fileContents = await safeReadFile(filePath);
        const result = migrationFilePgroll.safeParse(safeJSONParse(fileContents));
        if (!result.success) {
            return false;
        }
    }
    return true;
}
const getPgRollLink = (table, column) => {
    var _a;
    const foreignKeysForTable = table.foreignKeys;
    const foreignKeys = Object.keys(foreignKeysForTable !== null && foreignKeysForTable !== void 0 ? foreignKeysForTable : {});
    for (const key of foreignKeys) {
        const k = foreignKeysForTable[key];
        if (k && ((_a = k.columns) === null || _a === void 0 ? void 0 : _a.includes(column.name))) {
            return k;
        }
    }
    return null;
};
function pgRollToXataColumnType(type) {
    switch (type) {
        case 'boolean':
            return 'bool';
        case 'bigint':
        case 'integer':
            return 'int';
        case 'double precision':
            return 'float';
        case 'text':
            return 'text';
        case 'timestamptz':
            return 'datetime';
        case 'text[]':
            return 'multiple';
        case 'jsonb':
            return 'json';
        case 'xata_file':
            return 'file';
        case 'xata_file_array':
            return 'file[]';
        case 'real[]':
            return 'vector';
        default:
            return type;
    }
}
export async function getBranchDetailsWithPgRoll(xata, { workspace, region, database, branch }) {
    var _a;
    const details = await xata.api.branches.getBranchDetails({ workspace, region, database, branch });
    if (isBranchPgRollEnabled(details)) {
        const pgroll = await xata.api.migrations.getSchema({ workspace, region, database, branch });
        return {
            ...details,
            branchName: branch,
            createdAt: new Date().toISOString(),
            databaseName: database,
            id: pgroll.schema.name, // Not really
            lastMigrationID: '', // Not really
            version: 1,
            metadata: {},
            schema: {
                tables: Object.entries((_a = pgroll.schema.tables) !== null && _a !== void 0 ? _a : []).map(([name, table]) => {
                    var _a;
                    return ({
                        name,
                        columns: Object.values((_a = table.columns) !== null && _a !== void 0 ? _a : {})
                            .filter((column) => !['_id', '_createdat', '_updatedat', '_version'].includes(column.name))
                            .map((column) => ({
                            name: column.name,
                            type: getPgRollLink(table, column) ? 'link' : pgRollToXataColumnType(column.type),
                            link: getPgRollLink(table, column) ? { table: getPgRollLink(table, column).referencedTable } : undefined,
                            file: pgRollToXataColumnType(column.type) === 'file' || pgRollToXataColumnType(column.type) === 'file[]'
                                ? { defaultPublicAccess: false }
                                : undefined,
                            notNull: column.nullable === false,
                            unique: column.unique === true,
                            defaultValue: column.default
                        }))
                    });
                })
            }
        };
    }
    return details;
}
