import ts from 'typescript';
import { z } from 'zod';

type Column = {
    name: string;
    type: string;
    unique?: boolean;
    notNull?: boolean;
    defaultValue?: string;
    description?: string;
    link?: {
        table: string;
    };
    vector?: {
        dimension: number;
    };
    file?: {
        defaultPublicAccess?: boolean;
    };
    'file[]'?: {
        defaultPublicAccess?: boolean;
    };
    columns?: Column[];
};
declare const columnSchema: z.ZodSchema<Column>;
declare const revlinkSchema: z.ZodObject<{
    table: z.ZodString;
    column: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table: string;
    column: string;
}, {
    table: string;
    column: string;
}>;
declare const tableSchema: z.ZodObject<{
    name: z.ZodString;
    columns: z.ZodArray<z.ZodType<Column, z.ZodTypeDef, Column>, "many">;
    revLinks: z.ZodOptional<z.ZodArray<z.ZodObject<{
        table: z.ZodString;
        column: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        table: string;
        column: string;
    }, {
        table: string;
        column: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    columns: Column[];
    revLinks?: {
        table: string;
        column: string;
    }[] | undefined;
}, {
    name: string;
    columns: Column[];
    revLinks?: {
        table: string;
        column: string;
    }[] | undefined;
}>;
type Table = z.infer<typeof tableSchema>;
declare const xataDatabaseSchema: z.ZodObject<{
    tables: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        columns: z.ZodArray<z.ZodType<Column, z.ZodTypeDef, Column>, "many">;
        revLinks: z.ZodOptional<z.ZodArray<z.ZodObject<{
            table: z.ZodString;
            column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            table: string;
            column: string;
        }, {
            table: string;
            column: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        columns: Column[];
        revLinks?: {
            table: string;
            column: string;
        }[] | undefined;
    }, {
        name: string;
        columns: Column[];
        revLinks?: {
            table: string;
            column: string;
        }[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    tables: {
        name: string;
        columns: Column[];
        revLinks?: {
            table: string;
            column: string;
        }[] | undefined;
    }[];
}, {
    tables: {
        name: string;
        columns: Column[];
        revLinks?: {
            table: string;
            column: string;
        }[] | undefined;
    }[];
}>;
type XataDatabaseSchema = z.infer<typeof xataDatabaseSchema>;
declare const parseSchemaFile: (input: string) => z.SafeParseReturnType<{
    tables: {
        name: string;
        columns: Column[];
        revLinks?: {
            table: string;
            column: string;
        }[] | undefined;
    }[];
}, {
    tables: {
        name: string;
        columns: Column[];
        revLinks?: {
            table: string;
            column: string;
        }[] | undefined;
    }[];
}>;

type GenerateOptions = {
    schema: XataDatabaseSchema;
    databaseURL: string;
    language: Language;
    moduleType?: ModuleType;
    javascriptTarget?: JavascriptTarget;
    branch?: string;
    workspace?: string;
    existingCode?: string;
};
type Language = 'typescript' | 'javascript';
type ModuleType = 'esm' | 'cjs' | 'deno';
type JavascriptTarget = keyof typeof ts.ScriptTarget | undefined;
declare function isValidJavascriptTarget(target?: string): target is JavascriptTarget;
declare const javascriptTargets: string[];
declare function generate({ databaseURL, branch, language, moduleType, javascriptTarget, schema, existingCode }: GenerateOptions): Promise<{
    typescript: string;
    javascript: string;
    types: string | undefined;
}>;

export { type Column, type GenerateOptions, type Language, type ModuleType, type Table, type XataDatabaseSchema, columnSchema, generate, isValidJavascriptTarget, javascriptTargets, parseSchemaFile, revlinkSchema, tableSchema };
