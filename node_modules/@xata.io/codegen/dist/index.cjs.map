{"version":3,"file":"index.cjs","sources":["../src/version.ts","../src/codegen.ts","../src/schema.ts"],"sourcesContent":["export const VERSION = '0.29.4';","import Case from 'case';\nimport prettier from 'prettier';\nimport * as parserJavascript from 'prettier/parser-babel.js';\nimport * as parserTypeScript from 'prettier/parser-typescript.js';\nimport { Project, VariableDeclarationKind } from 'ts-morph';\nimport ts from 'typescript';\nimport { XataDatabaseSchema } from './schema';\nimport { VERSION } from './version';\n\nexport type GenerateOptions = {\n  schema: XataDatabaseSchema;\n  databaseURL: string;\n  language: Language;\n  moduleType?: ModuleType;\n  javascriptTarget?: JavascriptTarget;\n  branch?: string;\n  workspace?: string;\n  existingCode?: string;\n};\n\nexport type GenerateOutput = {\n  original: string;\n  transpiled: string;\n  declarations?: string;\n};\n\nexport type Language = 'typescript' | 'javascript';\nexport type ModuleType = 'esm' | 'cjs' | 'deno';\nexport type JavascriptTarget = keyof typeof ts.ScriptTarget | undefined;\n\nexport function isValidJavascriptTarget(target?: string): target is JavascriptTarget {\n  return target !== undefined && target in ts.ScriptTarget;\n}\n\n// Enum.keys() returns 2x the number of keys\nexport const javascriptTargets = Object.keys(ts.ScriptTarget).slice(Object.keys(ts.ScriptTarget).length / 2);\n\nfunction getTypeName(tableName: string) {\n  const name = Case.pascal(tableName);\n\n  // If table starts with a number, prepend a $ sign\n  if (name.match(/^\\d/)) return `$${name}`;\n\n  return name;\n}\n\nexport async function generate({\n  databaseURL,\n  branch,\n  language,\n  moduleType,\n  javascriptTarget,\n  schema,\n  existingCode\n}: GenerateOptions) {\n  // For now don't read external fs or tsconfig.json\n  const project = new Project({\n    useInMemoryFileSystem: true,\n    compilerOptions: {\n      module: moduleType === 'cjs' ? ts.ModuleKind.CommonJS : ts.ModuleKind.ESNext,\n      target: ts.ScriptTarget[javascriptTarget ?? 'ES2020']\n    }\n  });\n\n  const sourceFile = project.createSourceFile('xata.ts', existingCode);\n\n  const packageName = moduleType === 'deno' ? 'npm:@xata.io/client@latest' : '@xata.io/client';\n  const packageImports = ['buildClient'];\n  const typeImports = ['BaseClientOptions', 'SchemaInference', 'XataRecord'];\n\n  const importDeclarations = sourceFile\n    .getImportDeclarations()\n    .filter((i) => i.getModuleSpecifierValue() === packageName);\n\n  const namedImports = importDeclarations.flatMap((i) => i.getNamedImports());\n  for (const namedImport of namedImports) {\n    if (packageImports.includes(namedImport.getName())) {\n      namedImport.remove();\n    } else if (typeImports.includes(namedImport.getName())) {\n      namedImport.remove();\n    }\n  }\n\n  for (const importDeclaration of importDeclarations) {\n    if (importDeclaration.getNamedImports().length === 0) {\n      importDeclaration.remove();\n    }\n  }\n\n  // Add module imports\n  const sdkImport = sourceFile.getImportDeclaration(\n    (i) => i.getModuleSpecifierValue() === packageName && !i.isTypeOnly()\n  );\n\n  if (!sdkImport) {\n    sourceFile.addImportDeclaration({\n      namedImports: packageImports,\n      moduleSpecifier: packageName,\n      leadingTrivia: existingCode ? undefined : `// Generated by Xata Codegen ${VERSION}. Please do not edit.\\n`\n    });\n  } else {\n    const namedImports = new Set([...sdkImport.getNamedImports().map((i) => i.getName()), ...packageImports]);\n    sdkImport.removeNamedImports();\n    sdkImport.addNamedImports([...namedImports]);\n  }\n\n  // Add type imports\n  const typesImport = sourceFile.getImportDeclaration(\n    (i) => i.getModuleSpecifierValue() === packageName && i.isTypeOnly()\n  );\n\n  if (!typesImport) {\n    sourceFile.addImportDeclaration({\n      namedImports: typeImports,\n      moduleSpecifier: packageName,\n      isTypeOnly: true,\n      trailingTrivia: '\\n'\n    });\n  } else {\n    const namedImports = new Set([...typesImport.getNamedImports().map((i) => i.getName()), ...typeImports]);\n    typesImport.removeNamedImports();\n    typesImport.addNamedImports([...namedImports]);\n  }\n\n  // Add tables schema\n  const tablesList = sourceFile.getVariableDeclaration('tables');\n  const tablesListContent = `${JSON.stringify(schema.tables)} as const`;\n\n  if (!tablesList) {\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      declarations: [{ name: 'tables', initializer: tablesListContent }],\n      leadingTrivia:\n        language === 'javascript'\n          ? `/** @typedef { import('./types').SchemaTables } SchemaTables */\n             /** @type { SchemaTables } */\\n`\n          : undefined,\n      trailingTrivia: '\\n'\n    });\n  } else {\n    tablesList.setInitializer(tablesListContent);\n  }\n\n  // Add schema tables types\n  const schemaTables = sourceFile.getTypeAlias('SchemaTables');\n  const schemaTablesContent = `typeof tables`;\n\n  if (!schemaTables) {\n    sourceFile.addTypeAlias({ name: 'SchemaTables', type: schemaTablesContent, isExported: true });\n  } else {\n    schemaTables.setType(schemaTablesContent);\n  }\n\n  // Add inferred types\n  const inferredTypes = sourceFile.getTypeAlias('InferredTypes');\n  const inferredTypesContent = `SchemaInference<SchemaTables>`;\n\n  if (!inferredTypes) {\n    sourceFile.addTypeAlias({\n      name: 'InferredTypes',\n      type: inferredTypesContent,\n      isExported: true,\n      trailingTrivia: '\\n'\n    });\n  } else {\n    inferredTypes.setType(inferredTypesContent);\n  }\n\n  // Remove existing schema types\n  const existingSchemaTypes = sourceFile.getTypeAliases().filter((t) => t.getName().endsWith('Record'));\n  for (const type of existingSchemaTypes) {\n    sourceFile.getTypeAlias(type.getName().replace(/Record$/, ''))?.remove();\n    type.remove();\n  }\n\n  // Add schema types\n  for (const table of schema.tables) {\n    const typeName = getTypeName(table.name);\n\n    sourceFile.addTypeAlias({\n      name: typeName,\n      type: `InferredTypes['${table.name}']`,\n      isExported: true,\n      leadingTrivia: '\\n'\n    });\n\n    sourceFile.addTypeAlias({\n      name: `${typeName}Record`,\n      type: `${typeName} & XataRecord`,\n      isExported: true\n    });\n  }\n\n  // Add database schema generic type\n  const databaseSchema = sourceFile.getTypeAlias('DatabaseSchema');\n  const databaseSchemaContent = `{\n    ${schema.tables.map((table) => `'${table.name}': ${getTypeName(table.name)}Record`).join(',\\n')}\n  }`;\n\n  if (!databaseSchema) {\n    sourceFile.addTypeAlias({\n      name: 'DatabaseSchema',\n      type: databaseSchemaContent,\n      isExported: true,\n      leadingTrivia: '\\n'\n    });\n  } else {\n    databaseSchema.setType(databaseSchemaContent);\n  }\n\n  // Add database client builder\n  const databaseClient = sourceFile.getVariableDeclaration('DatabaseClient');\n  const databaseClientContent = `buildClient()`;\n\n  if (!databaseClient) {\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      declarations: [{ name: 'DatabaseClient', initializer: databaseClientContent }],\n      leadingTrivia:\n        language === 'javascript' ? `\\n/** @type { import('@xata.io/client').ClientConstructor<{}> } */\\n` : undefined,\n      trailingTrivia: '\\n'\n    });\n  } else {\n    databaseClient.setInitializer(databaseClientContent);\n  }\n\n  // Add default options\n  const defaultOptions = sourceFile.getVariableDeclaration('defaultOptions');\n  const defaultOptionsContent = JSON.stringify({ databaseURL, branch });\n\n  if (!defaultOptions) {\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      declarations: [{ name: 'defaultOptions', initializer: defaultOptionsContent }],\n      leadingTrivia: '\\n'\n    });\n  } else {\n    // TODO: merge with existing options\n    defaultOptions.setInitializer(defaultOptionsContent);\n  }\n\n  // Add XataClient class\n  const xataClient = sourceFile.getClass('XataClient');\n\n  if (!xataClient) {\n    sourceFile.addClass({\n      name: 'XataClient',\n      extends: 'DatabaseClient<DatabaseSchema>',\n      isExported: true,\n      leadingTrivia:\n        language === 'javascript'\n          ? `/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */\n               /** @extends DatabaseClient<DatabaseSchema> */\\n`\n          : undefined,\n      ctors: [\n        {\n          parameters: [\n            {\n              name: 'options',\n              type: 'BaseClientOptions',\n              hasQuestionToken: true\n            }\n          ],\n          statements: `super({ ...defaultOptions, ...options }, tables);`\n        }\n      ]\n    });\n  } else {\n    // noop: we don't want to overwrite their constructor\n  }\n\n  // Add XataClient instance\n  const xataClientInstance = sourceFile.getVariableDeclaration('instance');\n  const getXataClient = sourceFile.getVariableDeclaration('getXataClient');\n\n  if (!getXataClient) {\n    if (!xataClientInstance) {\n      sourceFile.addVariableStatement({\n        declarationKind: VariableDeclarationKind.Let,\n        declarations: [\n          {\n            name: 'instance',\n            initializer: 'undefined',\n            type: 'XataClient | undefined'\n          }\n        ],\n        trailingTrivia: '\\n'\n      });\n    }\n\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      declarations: [\n        {\n          name: 'getXataClient',\n          initializer: `() => {\n              if (instance) return instance;\n\n              instance = new XataClient();\n              return instance;\n            }`\n        }\n      ],\n      isExported: true,\n      leadingTrivia: language === 'javascript' ? `\\n/** @type { () => XataClient } */\\n` : '\\n',\n      trailingTrivia: '\\n'\n    });\n  } else {\n    // noop: we don't want to overwrite their instance getter\n  }\n\n  sourceFile.saveSync();\n  project.emitSync();\n\n  const typescript = prettier.format(sourceFile.getFullText(), {\n    parser: 'typescript',\n    plugins: [parserTypeScript]\n  });\n\n  const javascript = prettier.format(project.getFileSystem().readFileSync('xata.js'), {\n    parser: 'babel',\n    plugins: [parserJavascript]\n  });\n\n  const rawDeclarations = emitDeclarations(typescript);\n  const types = rawDeclarations\n    ? prettier.format(rawDeclarations, {\n        parser: 'typescript',\n        plugins: [parserTypeScript]\n      })\n    : undefined;\n\n  return { typescript, javascript, types };\n}\n\nfunction emitDeclarations(code: string) {\n  const files = new Map<string, string>();\n  const inputFileName = 'index.ts';\n  const sourceFile = ts.createSourceFile(inputFileName, code, ts.ScriptTarget.ESNext);\n\n  const compilerHost = {\n    getSourceFile: (fileName: string) => (fileName === inputFileName ? sourceFile : undefined),\n    writeFile: (_name: string, _text: string) => {},\n    getDefaultLibFileName: () => 'lib.d.ts',\n    useCaseSensitiveFileNames: () => false,\n    getCanonicalFileName: (fileName: string) => fileName,\n    getCurrentDirectory: () => '',\n    getNewLine: () => '\\n',\n    fileExists: (fileName: string) => fileName === inputFileName,\n    readFile: () => '',\n    directoryExists: () => true,\n    getDirectories: () => []\n  };\n\n  const program = ts.createProgram(\n    ['index.ts'],\n    { declaration: true, emitDeclarationOnly: true, removeComments: true },\n    compilerHost\n  );\n  program.emit(undefined, (fileName, data) => files.set(fileName, data), undefined, true);\n\n  return files.get('index.d.ts');\n}\n","import { z } from 'zod';\n\n// We need to do this because of problems with Zod and recursive types https://www.npmjs.com/package/zod#recursive-types\nexport type Column = {\n  name: string;\n  type: string;\n  unique?: boolean;\n  notNull?: boolean;\n  defaultValue?: string;\n  description?: string;\n  link?: {\n    table: string;\n  };\n  vector?: {\n    dimension: number;\n  };\n  file?: {\n    defaultPublicAccess?: boolean;\n  };\n  'file[]'?: {\n    defaultPublicAccess?: boolean;\n  };\n  columns?: Column[];\n};\n\nexport const columnSchema: z.ZodSchema<Column> = z.lazy(() =>\n  z.object({\n    name: z.string(),\n    type: z.string(),\n    unique: z.boolean().optional(),\n    notNull: z.boolean().optional(),\n    defaultValue: z.string().optional(),\n    description: z.string().optional(),\n    link: z\n      .object({\n        table: z.string()\n      })\n      .optional(),\n    vector: z\n      .object({\n        dimension: z.number()\n      })\n      .optional(),\n    file: z\n      .object({\n        defaultPublicAccess: z.boolean().optional()\n      })\n      .optional(),\n    'file[]': z\n      .object({\n        defaultPublicAccess: z.boolean().optional()\n      })\n      .optional(),\n    columns: z.array(columnSchema).optional()\n  })\n);\n\nexport const revlinkSchema = z.object({\n  table: z.string(),\n  column: z.string()\n});\n\nexport const tableSchema = z.object({\n  name: z.string(),\n  columns: z.array(columnSchema),\n  revLinks: z.array(revlinkSchema).optional()\n});\n\nexport type Table = z.infer<typeof tableSchema>;\n\nexport const xataDatabaseSchema = z.object({\n  tables: z.array(tableSchema)\n});\n\nexport type XataDatabaseSchema = z.infer<typeof xataDatabaseSchema>;\n\nexport const parseSchemaFile = (input: string) => {\n  return xataDatabaseSchema.safeParse(JSON.parse(input));\n};\n"],"names":["Project","namedImports","VariableDeclarationKind","parserTypeScript","parserJavascript","z"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,OAAU,GAAA,QAAA;;AC8BhB,SAAS,wBAAwB,MAA6C,EAAA;AACnF,EAAO,OAAA,MAAA,KAAW,KAAa,CAAA,IAAA,MAAA,IAAU,EAAG,CAAA,YAAA,CAAA;AAC9C,CAAA;AAGO,MAAM,iBAAoB,GAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,YAAY,CAAA,CAAE,KAAM,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,YAAY,CAAA,CAAE,SAAS,CAAC,EAAA;AAE3G,SAAS,YAAY,SAAmB,EAAA;AACtC,EAAM,MAAA,IAAA,GAAO,IAAK,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AAGlC,EAAI,IAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAG,IAAA,OAAO,IAAI,IAAI,CAAA,CAAA,CAAA;AAEtC,EAAO,OAAA,IAAA,CAAA;AACT,CAAA;AAEA,eAAsB,QAAS,CAAA;AAAA,EAC7B,WAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA,UAAA;AAAA,EACA,gBAAA;AAAA,EACA,MAAA;AAAA,EACA,YAAA;AACF,CAAoB,EAAA;AAElB,EAAM,MAAA,OAAA,GAAU,IAAIA,eAAQ,CAAA;AAAA,IAC1B,qBAAuB,EAAA,IAAA;AAAA,IACvB,eAAiB,EAAA;AAAA,MACf,QAAQ,UAAe,KAAA,KAAA,GAAQ,GAAG,UAAW,CAAA,QAAA,GAAW,GAAG,UAAW,CAAA,MAAA;AAAA,MACtE,MAAQ,EAAA,EAAA,CAAG,YAAa,CAAA,gBAAA,IAAoB,QAAQ,CAAA;AAAA,KACtD;AAAA,GACD,CAAA,CAAA;AAED,EAAA,MAAM,UAAa,GAAA,OAAA,CAAQ,gBAAiB,CAAA,SAAA,EAAW,YAAY,CAAA,CAAA;AAEnE,EAAM,MAAA,WAAA,GAAc,UAAe,KAAA,MAAA,GAAS,4BAA+B,GAAA,iBAAA,CAAA;AAC3E,EAAM,MAAA,cAAA,GAAiB,CAAC,aAAa,CAAA,CAAA;AACrC,EAAA,MAAM,WAAc,GAAA,CAAC,mBAAqB,EAAA,iBAAA,EAAmB,YAAY,CAAA,CAAA;AAEzE,EAAM,MAAA,kBAAA,GAAqB,UACxB,CAAA,qBAAA,EACA,CAAA,MAAA,CAAO,CAAC,CAAM,KAAA,CAAA,CAAE,uBAAwB,EAAA,KAAM,WAAW,CAAA,CAAA;AAE5D,EAAA,MAAM,eAAe,kBAAmB,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA,CAAA,CAAE,iBAAiB,CAAA,CAAA;AAC1E,EAAA,KAAA,MAAW,eAAe,YAAc,EAAA;AACtC,IAAA,IAAI,cAAe,CAAA,QAAA,CAAS,WAAY,CAAA,OAAA,EAAS,CAAG,EAAA;AAClD,MAAA,WAAA,CAAY,MAAO,EAAA,CAAA;AAAA,eACV,WAAY,CAAA,QAAA,CAAS,WAAY,CAAA,OAAA,EAAS,CAAG,EAAA;AACtD,MAAA,WAAA,CAAY,MAAO,EAAA,CAAA;AAAA,KACrB;AAAA,GACF;AAEA,EAAA,KAAA,MAAW,qBAAqB,kBAAoB,EAAA;AAClD,IAAA,IAAI,iBAAkB,CAAA,eAAA,EAAkB,CAAA,MAAA,KAAW,CAAG,EAAA;AACpD,MAAA,iBAAA,CAAkB,MAAO,EAAA,CAAA;AAAA,KAC3B;AAAA,GACF;AAGA,EAAA,MAAM,YAAY,UAAW,CAAA,oBAAA;AAAA,IAC3B,CAAC,MAAM,CAAE,CAAA,uBAAA,OAA8B,WAAe,IAAA,CAAC,EAAE,UAAW,EAAA;AAAA,GACtE,CAAA;AAEA,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAA,UAAA,CAAW,oBAAqB,CAAA;AAAA,MAC9B,YAAc,EAAA,cAAA;AAAA,MACd,eAAiB,EAAA,WAAA;AAAA,MACjB,aAAe,EAAA,YAAA,GAAe,KAAY,CAAA,GAAA,CAAA,6BAAA,EAAgC,OAAO,CAAA;AAAA,CAAA;AAAA,KAClF,CAAA,CAAA;AAAA,GACI,MAAA;AACL,IAAA,MAAMC,gCAAmB,IAAA,GAAA,CAAI,CAAC,GAAG,UAAU,eAAgB,EAAA,CAAE,GAAI,CAAA,CAAC,MAAM,CAAE,CAAA,OAAA,EAAS,CAAG,EAAA,GAAG,cAAc,CAAC,CAAA,CAAA;AACxG,IAAA,SAAA,CAAU,kBAAmB,EAAA,CAAA;AAC7B,IAAA,SAAA,CAAU,eAAgB,CAAA,CAAC,GAAGA,aAAY,CAAC,CAAA,CAAA;AAAA,GAC7C;AAGA,EAAA,MAAM,cAAc,UAAW,CAAA,oBAAA;AAAA,IAC7B,CAAC,CAAM,KAAA,CAAA,CAAE,yBAA8B,KAAA,WAAA,IAAe,EAAE,UAAW,EAAA;AAAA,GACrE,CAAA;AAEA,EAAA,IAAI,CAAC,WAAa,EAAA;AAChB,IAAA,UAAA,CAAW,oBAAqB,CAAA;AAAA,MAC9B,YAAc,EAAA,WAAA;AAAA,MACd,eAAiB,EAAA,WAAA;AAAA,MACjB,UAAY,EAAA,IAAA;AAAA,MACZ,cAAgB,EAAA,IAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACI,MAAA;AACL,IAAA,MAAMA,gCAAmB,IAAA,GAAA,CAAI,CAAC,GAAG,YAAY,eAAgB,EAAA,CAAE,GAAI,CAAA,CAAC,MAAM,CAAE,CAAA,OAAA,EAAS,CAAG,EAAA,GAAG,WAAW,CAAC,CAAA,CAAA;AACvG,IAAA,WAAA,CAAY,kBAAmB,EAAA,CAAA;AAC/B,IAAA,WAAA,CAAY,eAAgB,CAAA,CAAC,GAAGA,aAAY,CAAC,CAAA,CAAA;AAAA,GAC/C;AAGA,EAAM,MAAA,UAAA,GAAa,UAAW,CAAA,sBAAA,CAAuB,QAAQ,CAAA,CAAA;AAC7D,EAAA,MAAM,oBAAoB,CAAG,EAAA,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,MAAM,CAAC,CAAA,SAAA,CAAA,CAAA;AAE1D,EAAA,IAAI,CAAC,UAAY,EAAA;AACf,IAAA,UAAA,CAAW,oBAAqB,CAAA;AAAA,MAC9B,iBAAiBC,+BAAwB,CAAA,KAAA;AAAA,MACzC,cAAc,CAAC,EAAE,MAAM,QAAU,EAAA,WAAA,EAAa,mBAAmB,CAAA;AAAA,MACjE,aAAA,EACE,aAAa,YACT,GAAA,CAAA;AAAA;AAAA,CAEA,GAAA,KAAA,CAAA;AAAA,MACN,cAAgB,EAAA,IAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACI,MAAA;AACL,IAAA,UAAA,CAAW,eAAe,iBAAiB,CAAA,CAAA;AAAA,GAC7C;AAGA,EAAM,MAAA,YAAA,GAAe,UAAW,CAAA,YAAA,CAAa,cAAc,CAAA,CAAA;AAC3D,EAAA,MAAM,mBAAsB,GAAA,CAAA,aAAA,CAAA,CAAA;AAE5B,EAAA,IAAI,CAAC,YAAc,EAAA;AACjB,IAAW,UAAA,CAAA,YAAA,CAAa,EAAE,IAAM,EAAA,cAAA,EAAgB,MAAM,mBAAqB,EAAA,UAAA,EAAY,MAAM,CAAA,CAAA;AAAA,GACxF,MAAA;AACL,IAAA,YAAA,CAAa,QAAQ,mBAAmB,CAAA,CAAA;AAAA,GAC1C;AAGA,EAAM,MAAA,aAAA,GAAgB,UAAW,CAAA,YAAA,CAAa,eAAe,CAAA,CAAA;AAC7D,EAAA,MAAM,oBAAuB,GAAA,CAAA,6BAAA,CAAA,CAAA;AAE7B,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAA,UAAA,CAAW,YAAa,CAAA;AAAA,MACtB,IAAM,EAAA,eAAA;AAAA,MACN,IAAM,EAAA,oBAAA;AAAA,MACN,UAAY,EAAA,IAAA;AAAA,MACZ,cAAgB,EAAA,IAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACI,MAAA;AACL,IAAA,aAAA,CAAc,QAAQ,oBAAoB,CAAA,CAAA;AAAA,GAC5C;AAGA,EAAA,MAAM,mBAAsB,GAAA,UAAA,CAAW,cAAe,EAAA,CAAE,MAAO,CAAA,CAAC,CAAM,KAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAS,CAAA,QAAQ,CAAC,CAAA,CAAA;AACpG,EAAA,KAAA,MAAW,QAAQ,mBAAqB,EAAA;AACtC,IAAW,UAAA,CAAA,YAAA,CAAa,KAAK,OAAQ,EAAA,CAAE,QAAQ,SAAW,EAAA,EAAE,CAAC,CAAA,EAAG,MAAO,EAAA,CAAA;AACvE,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GACd;AAGA,EAAW,KAAA,MAAA,KAAA,IAAS,OAAO,MAAQ,EAAA;AACjC,IAAM,MAAA,QAAA,GAAW,WAAY,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAEvC,IAAA,UAAA,CAAW,YAAa,CAAA;AAAA,MACtB,IAAM,EAAA,QAAA;AAAA,MACN,IAAA,EAAM,CAAkB,eAAA,EAAA,KAAA,CAAM,IAAI,CAAA,EAAA,CAAA;AAAA,MAClC,UAAY,EAAA,IAAA;AAAA,MACZ,aAAe,EAAA,IAAA;AAAA,KAChB,CAAA,CAAA;AAED,IAAA,UAAA,CAAW,YAAa,CAAA;AAAA,MACtB,IAAA,EAAM,GAAG,QAAQ,CAAA,MAAA,CAAA;AAAA,MACjB,IAAA,EAAM,GAAG,QAAQ,CAAA,aAAA,CAAA;AAAA,MACjB,UAAY,EAAA,IAAA;AAAA,KACb,CAAA,CAAA;AAAA,GACH;AAGA,EAAM,MAAA,cAAA,GAAiB,UAAW,CAAA,YAAA,CAAa,gBAAgB,CAAA,CAAA;AAC/D,EAAA,MAAM,qBAAwB,GAAA,CAAA;AAAA,IAAA,EAC1B,OAAO,MAAO,CAAA,GAAA,CAAI,CAAC,KAAA,KAAU,IAAI,KAAM,CAAA,IAAI,CAAM,GAAA,EAAA,WAAA,CAAY,MAAM,IAAI,CAAC,QAAQ,CAAE,CAAA,IAAA,CAAK,KAAK,CAAC,CAAA;AAAA,GAAA,CAAA,CAAA;AAGjG,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAA,UAAA,CAAW,YAAa,CAAA;AAAA,MACtB,IAAM,EAAA,gBAAA;AAAA,MACN,IAAM,EAAA,qBAAA;AAAA,MACN,UAAY,EAAA,IAAA;AAAA,MACZ,aAAe,EAAA,IAAA;AAAA,KAChB,CAAA,CAAA;AAAA,GACI,MAAA;AACL,IAAA,cAAA,CAAe,QAAQ,qBAAqB,CAAA,CAAA;AAAA,GAC9C;AAGA,EAAM,MAAA,cAAA,GAAiB,UAAW,CAAA,sBAAA,CAAuB,gBAAgB,CAAA,CAAA;AACzE,EAAA,MAAM,qBAAwB,GAAA,CAAA,aAAA,CAAA,CAAA;AAE9B,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAA,UAAA,CAAW,oBAAqB,CAAA;AAAA,MAC9B,iBAAiBA,+BAAwB,CAAA,KAAA;AAAA,MACzC,cAAc,CAAC,EAAE,MAAM,gBAAkB,EAAA,WAAA,EAAa,uBAAuB,CAAA;AAAA,MAC7E,aAAA,EACE,aAAa,YAAe,GAAA,CAAA;AAAA;AAAA,CAAyE,GAAA,KAAA,CAAA;AAAA,MACvG,cAAgB,EAAA,IAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACI,MAAA;AACL,IAAA,cAAA,CAAe,eAAe,qBAAqB,CAAA,CAAA;AAAA,GACrD;AAGA,EAAM,MAAA,cAAA,GAAiB,UAAW,CAAA,sBAAA,CAAuB,gBAAgB,CAAA,CAAA;AACzE,EAAA,MAAM,wBAAwB,IAAK,CAAA,SAAA,CAAU,EAAE,WAAA,EAAa,QAAQ,CAAA,CAAA;AAEpE,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAA,UAAA,CAAW,oBAAqB,CAAA;AAAA,MAC9B,iBAAiBA,+BAAwB,CAAA,KAAA;AAAA,MACzC,cAAc,CAAC,EAAE,MAAM,gBAAkB,EAAA,WAAA,EAAa,uBAAuB,CAAA;AAAA,MAC7E,aAAe,EAAA,IAAA;AAAA,KAChB,CAAA,CAAA;AAAA,GACI,MAAA;AAEL,IAAA,cAAA,CAAe,eAAe,qBAAqB,CAAA,CAAA;AAAA,GACrD;AAGA,EAAM,MAAA,UAAA,GAAa,UAAW,CAAA,QAAA,CAAS,YAAY,CAAA,CAAA;AAEnD,EAAA,IAAI,CAAC,UAAY,EAAA;AACf,IAAA,UAAA,CAAW,QAAS,CAAA;AAAA,MAClB,IAAM,EAAA,YAAA;AAAA,MACN,OAAS,EAAA,gCAAA;AAAA,MACT,UAAY,EAAA,IAAA;AAAA,MACZ,aAAA,EACE,aAAa,YACT,GAAA,CAAA;AAAA;AAAA,CAEA,GAAA,KAAA,CAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL;AAAA,UACE,UAAY,EAAA;AAAA,YACV;AAAA,cACE,IAAM,EAAA,SAAA;AAAA,cACN,IAAM,EAAA,mBAAA;AAAA,cACN,gBAAkB,EAAA,IAAA;AAAA,aACpB;AAAA,WACF;AAAA,UACA,UAAY,EAAA,CAAA,iDAAA,CAAA;AAAA,SACd;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AAAA,GAGH;AAGA,EAAM,MAAA,kBAAA,GAAqB,UAAW,CAAA,sBAAA,CAAuB,UAAU,CAAA,CAAA;AACvE,EAAM,MAAA,aAAA,GAAgB,UAAW,CAAA,sBAAA,CAAuB,eAAe,CAAA,CAAA;AAEvE,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAA,IAAI,CAAC,kBAAoB,EAAA;AACvB,MAAA,UAAA,CAAW,oBAAqB,CAAA;AAAA,QAC9B,iBAAiBA,+BAAwB,CAAA,GAAA;AAAA,QACzC,YAAc,EAAA;AAAA,UACZ;AAAA,YACE,IAAM,EAAA,UAAA;AAAA,YACN,WAAa,EAAA,WAAA;AAAA,YACb,IAAM,EAAA,wBAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,cAAgB,EAAA,IAAA;AAAA,OACjB,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,UAAA,CAAW,oBAAqB,CAAA;AAAA,MAC9B,iBAAiBA,+BAAwB,CAAA,KAAA;AAAA,MACzC,YAAc,EAAA;AAAA,QACZ;AAAA,UACE,IAAM,EAAA,eAAA;AAAA,UACN,WAAa,EAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAA,CAAA;AAAA,SAMf;AAAA,OACF;AAAA,MACA,UAAY,EAAA,IAAA;AAAA,MACZ,aAAA,EAAe,aAAa,YAAe,GAAA,CAAA;AAAA;AAAA,CAA0C,GAAA,IAAA;AAAA,MACrF,cAAgB,EAAA,IAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GAGH;AAEA,EAAA,UAAA,CAAW,QAAS,EAAA,CAAA;AACpB,EAAA,OAAA,CAAQ,QAAS,EAAA,CAAA;AAEjB,EAAA,MAAM,UAAa,GAAA,QAAA,CAAS,MAAO,CAAA,UAAA,CAAW,aAAe,EAAA;AAAA,IAC3D,MAAQ,EAAA,YAAA;AAAA,IACR,OAAA,EAAS,CAACC,2BAAgB,CAAA;AAAA,GAC3B,CAAA,CAAA;AAED,EAAM,MAAA,UAAA,GAAa,SAAS,MAAO,CAAA,OAAA,CAAQ,eAAgB,CAAA,YAAA,CAAa,SAAS,CAAG,EAAA;AAAA,IAClF,MAAQ,EAAA,OAAA;AAAA,IACR,OAAA,EAAS,CAACC,2BAAgB,CAAA;AAAA,GAC3B,CAAA,CAAA;AAED,EAAM,MAAA,eAAA,GAAkB,iBAAiB,UAAU,CAAA,CAAA;AACnD,EAAA,MAAM,KAAQ,GAAA,eAAA,GACV,QAAS,CAAA,MAAA,CAAO,eAAiB,EAAA;AAAA,IAC/B,MAAQ,EAAA,YAAA;AAAA,IACR,OAAA,EAAS,CAACD,2BAAgB,CAAA;AAAA,GAC3B,CACD,GAAA,KAAA,CAAA,CAAA;AAEJ,EAAO,OAAA,EAAE,UAAY,EAAA,UAAA,EAAY,KAAM,EAAA,CAAA;AACzC,CAAA;AAEA,SAAS,iBAAiB,IAAc,EAAA;AACtC,EAAM,MAAA,KAAA,uBAAY,GAAoB,EAAA,CAAA;AACtC,EAAA,MAAM,aAAgB,GAAA,UAAA,CAAA;AACtB,EAAA,MAAM,aAAa,EAAG,CAAA,gBAAA,CAAiB,eAAe,IAAM,EAAA,EAAA,CAAG,aAAa,MAAM,CAAA,CAAA;AAElF,EAAA,MAAM,YAAe,GAAA;AAAA,IACnB,aAAe,EAAA,CAAC,QAAsB,KAAA,QAAA,KAAa,gBAAgB,UAAa,GAAA,KAAA,CAAA;AAAA,IAChF,SAAA,EAAW,CAAC,KAAA,EAAe,KAAkB,KAAA;AAAA,KAAC;AAAA,IAC9C,uBAAuB,MAAM,UAAA;AAAA,IAC7B,2BAA2B,MAAM,KAAA;AAAA,IACjC,oBAAA,EAAsB,CAAC,QAAqB,KAAA,QAAA;AAAA,IAC5C,qBAAqB,MAAM,EAAA;AAAA,IAC3B,YAAY,MAAM,IAAA;AAAA,IAClB,UAAA,EAAY,CAAC,QAAA,KAAqB,QAAa,KAAA,aAAA;AAAA,IAC/C,UAAU,MAAM,EAAA;AAAA,IAChB,iBAAiB,MAAM,IAAA;AAAA,IACvB,cAAA,EAAgB,MAAM,EAAC;AAAA,GACzB,CAAA;AAEA,EAAA,MAAM,UAAU,EAAG,CAAA,aAAA;AAAA,IACjB,CAAC,UAAU,CAAA;AAAA,IACX,EAAE,WAAa,EAAA,IAAA,EAAM,mBAAqB,EAAA,IAAA,EAAM,gBAAgB,IAAK,EAAA;AAAA,IACrE,YAAA;AAAA,GACF,CAAA;AACA,EAAQ,OAAA,CAAA,IAAA,CAAK,KAAW,CAAA,EAAA,CAAC,QAAU,EAAA,IAAA,KAAS,KAAM,CAAA,GAAA,CAAI,QAAU,EAAA,IAAI,CAAG,EAAA,KAAA,CAAA,EAAW,IAAI,CAAA,CAAA;AAEtF,EAAO,OAAA,KAAA,CAAM,IAAI,YAAY,CAAA,CAAA;AAC/B;;ACjVO,MAAM,eAAoCE,KAAE,CAAA,IAAA;AAAA,EAAK,MACtDA,MAAE,MAAO,CAAA;AAAA,IACP,IAAA,EAAMA,MAAE,MAAO,EAAA;AAAA,IACf,IAAA,EAAMA,MAAE,MAAO,EAAA;AAAA,IACf,MAAQ,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS,EAAA;AAAA,IAC7B,OAAS,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS,EAAA;AAAA,IAC9B,YAAc,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,IAClC,WAAa,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,IACjC,IAAA,EAAMA,MACH,MAAO,CAAA;AAAA,MACN,KAAA,EAAOA,MAAE,MAAO,EAAA;AAAA,KACjB,EACA,QAAS,EAAA;AAAA,IACZ,MAAA,EAAQA,MACL,MAAO,CAAA;AAAA,MACN,SAAA,EAAWA,MAAE,MAAO,EAAA;AAAA,KACrB,EACA,QAAS,EAAA;AAAA,IACZ,IAAA,EAAMA,MACH,MAAO,CAAA;AAAA,MACN,mBAAqB,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS,EAAA;AAAA,KAC3C,EACA,QAAS,EAAA;AAAA,IACZ,QAAA,EAAUA,MACP,MAAO,CAAA;AAAA,MACN,mBAAqB,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS,EAAA;AAAA,KAC3C,EACA,QAAS,EAAA;AAAA,IACZ,OAAS,EAAAA,KAAA,CAAE,KAAM,CAAA,YAAY,EAAE,QAAS,EAAA;AAAA,GACzC,CAAA;AACH,EAAA;AAEa,MAAA,aAAA,GAAgBA,MAAE,MAAO,CAAA;AAAA,EACpC,KAAA,EAAOA,MAAE,MAAO,EAAA;AAAA,EAChB,MAAA,EAAQA,MAAE,MAAO,EAAA;AACnB,CAAC,EAAA;AAEY,MAAA,WAAA,GAAcA,MAAE,MAAO,CAAA;AAAA,EAClC,IAAA,EAAMA,MAAE,MAAO,EAAA;AAAA,EACf,OAAA,EAASA,KAAE,CAAA,KAAA,CAAM,YAAY,CAAA;AAAA,EAC7B,QAAU,EAAAA,KAAA,CAAE,KAAM,CAAA,aAAa,EAAE,QAAS,EAAA;AAC5C,CAAC,EAAA;AAIY,MAAA,kBAAA,GAAqBA,MAAE,MAAO,CAAA;AAAA,EACzC,MAAA,EAAQA,KAAE,CAAA,KAAA,CAAM,WAAW,CAAA;AAC7B,CAAC,CAAA,CAAA;AAIY,MAAA,eAAA,GAAkB,CAAC,KAAkB,KAAA;AAChD,EAAA,OAAO,kBAAmB,CAAA,SAAA,CAAU,IAAK,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA,CAAA;AACvD;;;;;;;;;;"}