import { z } from 'zod';

type CheckConstraint = z.infer<typeof CheckConstraintDefinition>;
declare const CheckConstraintDefinition: z.ZodObject<{
    constraint: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    constraint: string;
    name: string;
}, {
    constraint: string;
    name: string;
}>;
type ForeignKeyReference = z.infer<typeof ForeignKeyReferenceDefinition>;
declare const ForeignKeyReferenceDefinition: z.ZodObject<{
    column: z.ZodString;
    name: z.ZodString;
    table: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    column: string;
    table: string;
}, {
    name: string;
    column: string;
    table: string;
}>;
type Column = z.infer<typeof ColumnDefinition>;
declare const ColumnDefinition: z.ZodObject<{
    check: z.ZodOptional<z.ZodObject<{
        constraint: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        constraint: string;
        name: string;
    }, {
        constraint: string;
        name: string;
    }>>;
    default: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    nullable: z.ZodOptional<z.ZodBoolean>;
    pk: z.ZodOptional<z.ZodBoolean>;
    references: z.ZodOptional<z.ZodObject<{
        column: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        column: string;
        table: string;
    }, {
        name: string;
        column: string;
        table: string;
    }>>;
    type: z.ZodString;
    unique: z.ZodOptional<z.ZodBoolean>;
    comment: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: string;
    check?: {
        constraint: string;
        name: string;
    } | undefined;
    default?: string | undefined;
    nullable?: boolean | undefined;
    pk?: boolean | undefined;
    references?: {
        name: string;
        column: string;
        table: string;
    } | undefined;
    unique?: boolean | undefined;
    comment?: string | undefined;
}, {
    name: string;
    type: string;
    check?: {
        constraint: string;
        name: string;
    } | undefined;
    default?: string | undefined;
    nullable?: boolean | undefined;
    pk?: boolean | undefined;
    references?: {
        name: string;
        column: string;
        table: string;
    } | undefined;
    unique?: boolean | undefined;
    comment?: string | undefined;
}>;
type OpAddColumn = z.infer<typeof OpAddColumnDefinition>;
declare const OpAddColumnDefinition: z.ZodObject<{
    column: z.ZodObject<{
        check: z.ZodOptional<z.ZodObject<{
            constraint: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            constraint: string;
            name: string;
        }, {
            constraint: string;
            name: string;
        }>>;
        default: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        nullable: z.ZodOptional<z.ZodBoolean>;
        pk: z.ZodOptional<z.ZodBoolean>;
        references: z.ZodOptional<z.ZodObject<{
            column: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            column: string;
            table: string;
        }, {
            name: string;
            column: string;
            table: string;
        }>>;
        type: z.ZodString;
        unique: z.ZodOptional<z.ZodBoolean>;
        comment: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    }, {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    }>;
    table: z.ZodString;
    up: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    column: {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    };
    table: string;
    up?: string | undefined;
}, {
    column: {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    };
    table: string;
    up?: string | undefined;
}>;
type UniqueConstraint = z.infer<typeof UniqueConstraintDefinition>;
declare const UniqueConstraintDefinition: z.ZodObject<{
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>;
type OpAlterColumn = z.infer<typeof OpAlterColumnDefinition>;
declare const OpAlterColumnDefinition: z.ZodObject<{
    check: z.ZodOptional<z.ZodObject<{
        constraint: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        constraint: string;
        name: string;
    }, {
        constraint: string;
        name: string;
    }>>;
    column: z.ZodString;
    down: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    nullable: z.ZodOptional<z.ZodBoolean>;
    references: z.ZodOptional<z.ZodObject<{
        column: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        column: string;
        table: string;
    }, {
        name: string;
        column: string;
        table: string;
    }>>;
    table: z.ZodString;
    type: z.ZodOptional<z.ZodString>;
    unique: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>>;
    up: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    column: string;
    table: string;
    check?: {
        constraint: string;
        name: string;
    } | undefined;
    down?: string | undefined;
    name?: string | undefined;
    nullable?: boolean | undefined;
    references?: {
        name: string;
        column: string;
        table: string;
    } | undefined;
    type?: string | undefined;
    unique?: {
        name: string;
    } | undefined;
    up?: string | undefined;
}, {
    column: string;
    table: string;
    check?: {
        constraint: string;
        name: string;
    } | undefined;
    down?: string | undefined;
    name?: string | undefined;
    nullable?: boolean | undefined;
    references?: {
        name: string;
        column: string;
        table: string;
    } | undefined;
    type?: string | undefined;
    unique?: {
        name: string;
    } | undefined;
    up?: string | undefined;
}>;
type OpCreateIndex = z.infer<typeof OpCreateIndexDefinition>;
declare const OpCreateIndexDefinition: z.ZodObject<{
    columns: z.ZodArray<z.ZodString, "many">;
    name: z.ZodString;
    table: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    table: string;
    columns: string[];
}, {
    name: string;
    table: string;
    columns: string[];
}>;
type OpCreateTable = z.infer<typeof OpCreateTableDefinition>;
declare const OpCreateTableDefinition: z.ZodObject<{
    columns: z.ZodArray<z.ZodObject<{
        check: z.ZodOptional<z.ZodObject<{
            constraint: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            constraint: string;
            name: string;
        }, {
            constraint: string;
            name: string;
        }>>;
        default: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        nullable: z.ZodOptional<z.ZodBoolean>;
        pk: z.ZodOptional<z.ZodBoolean>;
        references: z.ZodOptional<z.ZodObject<{
            column: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            column: string;
            table: string;
        }, {
            name: string;
            column: string;
            table: string;
        }>>;
        type: z.ZodString;
        unique: z.ZodOptional<z.ZodBoolean>;
        comment: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    }, {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    }>, "many">;
    name: z.ZodString;
    comment: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    columns: {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    }[];
    comment?: string | undefined;
}, {
    name: string;
    columns: {
        name: string;
        type: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        default?: string | undefined;
        nullable?: boolean | undefined;
        pk?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        unique?: boolean | undefined;
        comment?: string | undefined;
    }[];
    comment?: string | undefined;
}>;
type OpDropColumn = z.infer<typeof OpDropColumnDefinition>;
declare const OpDropColumnDefinition: z.ZodObject<{
    column: z.ZodString;
    down: z.ZodOptional<z.ZodString>;
    table: z.ZodString;
}, "strip", z.ZodTypeAny, {
    column: string;
    table: string;
    down?: string | undefined;
}, {
    column: string;
    table: string;
    down?: string | undefined;
}>;
type OpDropConstraint = z.infer<typeof OpDropConstraintDefinition>;
declare const OpDropConstraintDefinition: z.ZodObject<{
    column: z.ZodString;
    down: z.ZodString;
    name: z.ZodString;
    table: z.ZodString;
    up: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    column: string;
    table: string;
    up: string;
    down: string;
}, {
    name: string;
    column: string;
    table: string;
    up: string;
    down: string;
}>;
type OpDropIndex = z.infer<typeof OpDropIndexDefinition>;
declare const OpDropIndexDefinition: z.ZodObject<{
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>;
type OpDropTable = z.infer<typeof OpDropTableDefinition>;
declare const OpDropTableDefinition: z.ZodObject<{
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>;
type OpRawSQL = z.infer<typeof OpRawSQLDefinition>;
declare const OpRawSQLDefinition: z.ZodObject<{
    down: z.ZodOptional<z.ZodString>;
    up: z.ZodString;
    onComplete: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    up: string;
    down?: string | undefined;
    onComplete?: boolean | undefined;
}, {
    up: string;
    down?: string | undefined;
    onComplete?: boolean | undefined;
}>;
type OpRenameTable = z.infer<typeof OpRenameTableDefinition>;
declare const OpRenameTableDefinition: z.ZodObject<{
    from: z.ZodString;
    to: z.ZodString;
}, "strip", z.ZodTypeAny, {
    from: string;
    to: string;
}, {
    from: string;
    to: string;
}>;
type ReplicaIdentity = z.infer<typeof ReplicaIdentityDefinition>;
declare const ReplicaIdentityDefinition: z.ZodObject<{
    index: z.ZodString;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    index: string;
}, {
    type: string;
    index: string;
}>;
type OpSetReplicaIdentity = z.infer<typeof OpSetReplicaIdentityDefinition>;
declare const OpSetReplicaIdentityDefinition: z.ZodObject<{
    identity: z.ZodObject<{
        index: z.ZodString;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        index: string;
    }, {
        type: string;
        index: string;
    }>;
    table: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table: string;
    identity: {
        type: string;
        index: string;
    };
}, {
    table: string;
    identity: {
        type: string;
        index: string;
    };
}>;
type PgRollOperation = z.infer<typeof PgRollOperationDefinition>;
declare const PgRollOperationDefinition: z.ZodUnion<[z.ZodObject<{
    add_column: z.ZodObject<{
        column: z.ZodObject<{
            check: z.ZodOptional<z.ZodObject<{
                constraint: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                constraint: string;
                name: string;
            }, {
                constraint: string;
                name: string;
            }>>;
            default: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            nullable: z.ZodOptional<z.ZodBoolean>;
            pk: z.ZodOptional<z.ZodBoolean>;
            references: z.ZodOptional<z.ZodObject<{
                column: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                column: string;
                table: string;
            }, {
                name: string;
                column: string;
                table: string;
            }>>;
            type: z.ZodString;
            unique: z.ZodOptional<z.ZodBoolean>;
            comment: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }>;
        table: z.ZodString;
        up: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    }, {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    add_column: {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    };
}, {
    add_column: {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    };
}>, z.ZodObject<{
    alter_column: z.ZodObject<{
        check: z.ZodOptional<z.ZodObject<{
            constraint: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            constraint: string;
            name: string;
        }, {
            constraint: string;
            name: string;
        }>>;
        column: z.ZodString;
        down: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        nullable: z.ZodOptional<z.ZodBoolean>;
        references: z.ZodOptional<z.ZodObject<{
            column: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            column: string;
            table: string;
        }, {
            name: string;
            column: string;
            table: string;
        }>>;
        table: z.ZodString;
        type: z.ZodOptional<z.ZodString>;
        unique: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>>;
        up: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    }, {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    alter_column: {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    };
}, {
    alter_column: {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    };
}>, z.ZodObject<{
    create_index: z.ZodObject<{
        columns: z.ZodArray<z.ZodString, "many">;
        name: z.ZodString;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        table: string;
        columns: string[];
    }, {
        name: string;
        table: string;
        columns: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    create_index: {
        name: string;
        table: string;
        columns: string[];
    };
}, {
    create_index: {
        name: string;
        table: string;
        columns: string[];
    };
}>, z.ZodObject<{
    create_table: z.ZodObject<{
        columns: z.ZodArray<z.ZodObject<{
            check: z.ZodOptional<z.ZodObject<{
                constraint: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                constraint: string;
                name: string;
            }, {
                constraint: string;
                name: string;
            }>>;
            default: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            nullable: z.ZodOptional<z.ZodBoolean>;
            pk: z.ZodOptional<z.ZodBoolean>;
            references: z.ZodOptional<z.ZodObject<{
                column: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                column: string;
                table: string;
            }, {
                name: string;
                column: string;
                table: string;
            }>>;
            type: z.ZodString;
            unique: z.ZodOptional<z.ZodBoolean>;
            comment: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }>, "many">;
        name: z.ZodString;
        comment: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    }, {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    create_table: {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    };
}, {
    create_table: {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    };
}>, z.ZodObject<{
    drop_column: z.ZodObject<{
        column: z.ZodString;
        down: z.ZodOptional<z.ZodString>;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        column: string;
        table: string;
        down?: string | undefined;
    }, {
        column: string;
        table: string;
        down?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_column: {
        column: string;
        table: string;
        down?: string | undefined;
    };
}, {
    drop_column: {
        column: string;
        table: string;
        down?: string | undefined;
    };
}>, z.ZodObject<{
    drop_constraint: z.ZodObject<{
        column: z.ZodString;
        down: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        up: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    }, {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_constraint: {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    };
}, {
    drop_constraint: {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    };
}>, z.ZodObject<{
    drop_index: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_index: {
        name: string;
    };
}, {
    drop_index: {
        name: string;
    };
}>, z.ZodObject<{
    drop_table: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_table: {
        name: string;
    };
}, {
    drop_table: {
        name: string;
    };
}>, z.ZodObject<{
    sql: z.ZodObject<{
        down: z.ZodOptional<z.ZodString>;
        up: z.ZodString;
        onComplete: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    }, {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    sql: {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    };
}, {
    sql: {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    };
}>, z.ZodObject<{
    rename_table: z.ZodObject<{
        from: z.ZodString;
        to: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        from: string;
        to: string;
    }, {
        from: string;
        to: string;
    }>;
}, "strip", z.ZodTypeAny, {
    rename_table: {
        from: string;
        to: string;
    };
}, {
    rename_table: {
        from: string;
        to: string;
    };
}>, z.ZodObject<{
    set_replica_identity: z.ZodObject<{
        identity: z.ZodObject<{
            index: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            index: string;
        }, {
            type: string;
            index: string;
        }>;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    }, {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    set_replica_identity: {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    };
}, {
    set_replica_identity: {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    };
}>]>;
type PgRollOperations = z.infer<typeof PgRollOperationsDefinition>;
declare const PgRollOperationsDefinition: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    add_column: z.ZodObject<{
        column: z.ZodObject<{
            check: z.ZodOptional<z.ZodObject<{
                constraint: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                constraint: string;
                name: string;
            }, {
                constraint: string;
                name: string;
            }>>;
            default: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            nullable: z.ZodOptional<z.ZodBoolean>;
            pk: z.ZodOptional<z.ZodBoolean>;
            references: z.ZodOptional<z.ZodObject<{
                column: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                column: string;
                table: string;
            }, {
                name: string;
                column: string;
                table: string;
            }>>;
            type: z.ZodString;
            unique: z.ZodOptional<z.ZodBoolean>;
            comment: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }>;
        table: z.ZodString;
        up: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    }, {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    add_column: {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    };
}, {
    add_column: {
        column: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        };
        table: string;
        up?: string | undefined;
    };
}>, z.ZodObject<{
    alter_column: z.ZodObject<{
        check: z.ZodOptional<z.ZodObject<{
            constraint: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            constraint: string;
            name: string;
        }, {
            constraint: string;
            name: string;
        }>>;
        column: z.ZodString;
        down: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        nullable: z.ZodOptional<z.ZodBoolean>;
        references: z.ZodOptional<z.ZodObject<{
            column: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            column: string;
            table: string;
        }, {
            name: string;
            column: string;
            table: string;
        }>>;
        table: z.ZodString;
        type: z.ZodOptional<z.ZodString>;
        unique: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>>;
        up: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    }, {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    alter_column: {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    };
}, {
    alter_column: {
        column: string;
        table: string;
        check?: {
            constraint: string;
            name: string;
        } | undefined;
        down?: string | undefined;
        name?: string | undefined;
        nullable?: boolean | undefined;
        references?: {
            name: string;
            column: string;
            table: string;
        } | undefined;
        type?: string | undefined;
        unique?: {
            name: string;
        } | undefined;
        up?: string | undefined;
    };
}>, z.ZodObject<{
    create_index: z.ZodObject<{
        columns: z.ZodArray<z.ZodString, "many">;
        name: z.ZodString;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        table: string;
        columns: string[];
    }, {
        name: string;
        table: string;
        columns: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    create_index: {
        name: string;
        table: string;
        columns: string[];
    };
}, {
    create_index: {
        name: string;
        table: string;
        columns: string[];
    };
}>, z.ZodObject<{
    create_table: z.ZodObject<{
        columns: z.ZodArray<z.ZodObject<{
            check: z.ZodOptional<z.ZodObject<{
                constraint: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                constraint: string;
                name: string;
            }, {
                constraint: string;
                name: string;
            }>>;
            default: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            nullable: z.ZodOptional<z.ZodBoolean>;
            pk: z.ZodOptional<z.ZodBoolean>;
            references: z.ZodOptional<z.ZodObject<{
                column: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                column: string;
                table: string;
            }, {
                name: string;
                column: string;
                table: string;
            }>>;
            type: z.ZodString;
            unique: z.ZodOptional<z.ZodBoolean>;
            comment: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }, {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }>, "many">;
        name: z.ZodString;
        comment: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    }, {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    create_table: {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    };
}, {
    create_table: {
        name: string;
        columns: {
            name: string;
            type: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            default?: string | undefined;
            nullable?: boolean | undefined;
            pk?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            unique?: boolean | undefined;
            comment?: string | undefined;
        }[];
        comment?: string | undefined;
    };
}>, z.ZodObject<{
    drop_column: z.ZodObject<{
        column: z.ZodString;
        down: z.ZodOptional<z.ZodString>;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        column: string;
        table: string;
        down?: string | undefined;
    }, {
        column: string;
        table: string;
        down?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_column: {
        column: string;
        table: string;
        down?: string | undefined;
    };
}, {
    drop_column: {
        column: string;
        table: string;
        down?: string | undefined;
    };
}>, z.ZodObject<{
    drop_constraint: z.ZodObject<{
        column: z.ZodString;
        down: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        up: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    }, {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_constraint: {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    };
}, {
    drop_constraint: {
        name: string;
        column: string;
        table: string;
        up: string;
        down: string;
    };
}>, z.ZodObject<{
    drop_index: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_index: {
        name: string;
    };
}, {
    drop_index: {
        name: string;
    };
}>, z.ZodObject<{
    drop_table: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    drop_table: {
        name: string;
    };
}, {
    drop_table: {
        name: string;
    };
}>, z.ZodObject<{
    sql: z.ZodObject<{
        down: z.ZodOptional<z.ZodString>;
        up: z.ZodString;
        onComplete: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    }, {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    sql: {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    };
}, {
    sql: {
        up: string;
        down?: string | undefined;
        onComplete?: boolean | undefined;
    };
}>, z.ZodObject<{
    rename_table: z.ZodObject<{
        from: z.ZodString;
        to: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        from: string;
        to: string;
    }, {
        from: string;
        to: string;
    }>;
}, "strip", z.ZodTypeAny, {
    rename_table: {
        from: string;
        to: string;
    };
}, {
    rename_table: {
        from: string;
        to: string;
    };
}>, z.ZodObject<{
    set_replica_identity: z.ZodObject<{
        identity: z.ZodObject<{
            index: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            index: string;
        }, {
            type: string;
            index: string;
        }>;
        table: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    }, {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    set_replica_identity: {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    };
}, {
    set_replica_identity: {
        table: string;
        identity: {
            type: string;
            index: string;
        };
    };
}>]>, "many">;
type PgRollMigration = z.infer<typeof PgRollMigrationDefinition>;
declare const PgRollMigrationDefinition: z.ZodObject<{
    name: z.ZodString;
    operations: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        add_column: z.ZodObject<{
            column: z.ZodObject<{
                check: z.ZodOptional<z.ZodObject<{
                    constraint: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    constraint: string;
                    name: string;
                }, {
                    constraint: string;
                    name: string;
                }>>;
                default: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                nullable: z.ZodOptional<z.ZodBoolean>;
                pk: z.ZodOptional<z.ZodBoolean>;
                references: z.ZodOptional<z.ZodObject<{
                    column: z.ZodString;
                    name: z.ZodString;
                    table: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    column: string;
                    table: string;
                }, {
                    name: string;
                    column: string;
                    table: string;
                }>>;
                type: z.ZodString;
                unique: z.ZodOptional<z.ZodBoolean>;
                comment: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }, {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }>;
            table: z.ZodString;
            up: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            column: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            };
            table: string;
            up?: string | undefined;
        }, {
            column: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            };
            table: string;
            up?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        add_column: {
            column: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            };
            table: string;
            up?: string | undefined;
        };
    }, {
        add_column: {
            column: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            };
            table: string;
            up?: string | undefined;
        };
    }>, z.ZodObject<{
        alter_column: z.ZodObject<{
            check: z.ZodOptional<z.ZodObject<{
                constraint: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                constraint: string;
                name: string;
            }, {
                constraint: string;
                name: string;
            }>>;
            column: z.ZodString;
            down: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
            nullable: z.ZodOptional<z.ZodBoolean>;
            references: z.ZodOptional<z.ZodObject<{
                column: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                column: string;
                table: string;
            }, {
                name: string;
                column: string;
                table: string;
            }>>;
            table: z.ZodString;
            type: z.ZodOptional<z.ZodString>;
            unique: z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>>;
            up: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            column: string;
            table: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            down?: string | undefined;
            name?: string | undefined;
            nullable?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            type?: string | undefined;
            unique?: {
                name: string;
            } | undefined;
            up?: string | undefined;
        }, {
            column: string;
            table: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            down?: string | undefined;
            name?: string | undefined;
            nullable?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            type?: string | undefined;
            unique?: {
                name: string;
            } | undefined;
            up?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        alter_column: {
            column: string;
            table: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            down?: string | undefined;
            name?: string | undefined;
            nullable?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            type?: string | undefined;
            unique?: {
                name: string;
            } | undefined;
            up?: string | undefined;
        };
    }, {
        alter_column: {
            column: string;
            table: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            down?: string | undefined;
            name?: string | undefined;
            nullable?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            type?: string | undefined;
            unique?: {
                name: string;
            } | undefined;
            up?: string | undefined;
        };
    }>, z.ZodObject<{
        create_index: z.ZodObject<{
            columns: z.ZodArray<z.ZodString, "many">;
            name: z.ZodString;
            table: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            table: string;
            columns: string[];
        }, {
            name: string;
            table: string;
            columns: string[];
        }>;
    }, "strip", z.ZodTypeAny, {
        create_index: {
            name: string;
            table: string;
            columns: string[];
        };
    }, {
        create_index: {
            name: string;
            table: string;
            columns: string[];
        };
    }>, z.ZodObject<{
        create_table: z.ZodObject<{
            columns: z.ZodArray<z.ZodObject<{
                check: z.ZodOptional<z.ZodObject<{
                    constraint: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    constraint: string;
                    name: string;
                }, {
                    constraint: string;
                    name: string;
                }>>;
                default: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                nullable: z.ZodOptional<z.ZodBoolean>;
                pk: z.ZodOptional<z.ZodBoolean>;
                references: z.ZodOptional<z.ZodObject<{
                    column: z.ZodString;
                    name: z.ZodString;
                    table: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    column: string;
                    table: string;
                }, {
                    name: string;
                    column: string;
                    table: string;
                }>>;
                type: z.ZodString;
                unique: z.ZodOptional<z.ZodBoolean>;
                comment: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }, {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }>, "many">;
            name: z.ZodString;
            comment: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            columns: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }[];
            comment?: string | undefined;
        }, {
            name: string;
            columns: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }[];
            comment?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        create_table: {
            name: string;
            columns: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }[];
            comment?: string | undefined;
        };
    }, {
        create_table: {
            name: string;
            columns: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }[];
            comment?: string | undefined;
        };
    }>, z.ZodObject<{
        drop_column: z.ZodObject<{
            column: z.ZodString;
            down: z.ZodOptional<z.ZodString>;
            table: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            column: string;
            table: string;
            down?: string | undefined;
        }, {
            column: string;
            table: string;
            down?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        drop_column: {
            column: string;
            table: string;
            down?: string | undefined;
        };
    }, {
        drop_column: {
            column: string;
            table: string;
            down?: string | undefined;
        };
    }>, z.ZodObject<{
        drop_constraint: z.ZodObject<{
            column: z.ZodString;
            down: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            up: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            column: string;
            table: string;
            up: string;
            down: string;
        }, {
            name: string;
            column: string;
            table: string;
            up: string;
            down: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        drop_constraint: {
            name: string;
            column: string;
            table: string;
            up: string;
            down: string;
        };
    }, {
        drop_constraint: {
            name: string;
            column: string;
            table: string;
            up: string;
            down: string;
        };
    }>, z.ZodObject<{
        drop_index: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        drop_index: {
            name: string;
        };
    }, {
        drop_index: {
            name: string;
        };
    }>, z.ZodObject<{
        drop_table: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        drop_table: {
            name: string;
        };
    }, {
        drop_table: {
            name: string;
        };
    }>, z.ZodObject<{
        sql: z.ZodObject<{
            down: z.ZodOptional<z.ZodString>;
            up: z.ZodString;
            onComplete: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            up: string;
            down?: string | undefined;
            onComplete?: boolean | undefined;
        }, {
            up: string;
            down?: string | undefined;
            onComplete?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        sql: {
            up: string;
            down?: string | undefined;
            onComplete?: boolean | undefined;
        };
    }, {
        sql: {
            up: string;
            down?: string | undefined;
            onComplete?: boolean | undefined;
        };
    }>, z.ZodObject<{
        rename_table: z.ZodObject<{
            from: z.ZodString;
            to: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            from: string;
            to: string;
        }, {
            from: string;
            to: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        rename_table: {
            from: string;
            to: string;
        };
    }, {
        rename_table: {
            from: string;
            to: string;
        };
    }>, z.ZodObject<{
        set_replica_identity: z.ZodObject<{
            identity: z.ZodObject<{
                index: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                index: string;
            }, {
                type: string;
                index: string;
            }>;
            table: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            table: string;
            identity: {
                type: string;
                index: string;
            };
        }, {
            table: string;
            identity: {
                type: string;
                index: string;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        set_replica_identity: {
            table: string;
            identity: {
                type: string;
                index: string;
            };
        };
    }, {
        set_replica_identity: {
            table: string;
            identity: {
                type: string;
                index: string;
            };
        };
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    operations: ({
        add_column: {
            column: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            };
            table: string;
            up?: string | undefined;
        };
    } | {
        alter_column: {
            column: string;
            table: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            down?: string | undefined;
            name?: string | undefined;
            nullable?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            type?: string | undefined;
            unique?: {
                name: string;
            } | undefined;
            up?: string | undefined;
        };
    } | {
        create_index: {
            name: string;
            table: string;
            columns: string[];
        };
    } | {
        create_table: {
            name: string;
            columns: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }[];
            comment?: string | undefined;
        };
    } | {
        drop_column: {
            column: string;
            table: string;
            down?: string | undefined;
        };
    } | {
        drop_constraint: {
            name: string;
            column: string;
            table: string;
            up: string;
            down: string;
        };
    } | {
        drop_index: {
            name: string;
        };
    } | {
        drop_table: {
            name: string;
        };
    } | {
        sql: {
            up: string;
            down?: string | undefined;
            onComplete?: boolean | undefined;
        };
    } | {
        rename_table: {
            from: string;
            to: string;
        };
    } | {
        set_replica_identity: {
            table: string;
            identity: {
                type: string;
                index: string;
            };
        };
    })[];
}, {
    name: string;
    operations: ({
        add_column: {
            column: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            };
            table: string;
            up?: string | undefined;
        };
    } | {
        alter_column: {
            column: string;
            table: string;
            check?: {
                constraint: string;
                name: string;
            } | undefined;
            down?: string | undefined;
            name?: string | undefined;
            nullable?: boolean | undefined;
            references?: {
                name: string;
                column: string;
                table: string;
            } | undefined;
            type?: string | undefined;
            unique?: {
                name: string;
            } | undefined;
            up?: string | undefined;
        };
    } | {
        create_index: {
            name: string;
            table: string;
            columns: string[];
        };
    } | {
        create_table: {
            name: string;
            columns: {
                name: string;
                type: string;
                check?: {
                    constraint: string;
                    name: string;
                } | undefined;
                default?: string | undefined;
                nullable?: boolean | undefined;
                pk?: boolean | undefined;
                references?: {
                    name: string;
                    column: string;
                    table: string;
                } | undefined;
                unique?: boolean | undefined;
                comment?: string | undefined;
            }[];
            comment?: string | undefined;
        };
    } | {
        drop_column: {
            column: string;
            table: string;
            down?: string | undefined;
        };
    } | {
        drop_constraint: {
            name: string;
            column: string;
            table: string;
            up: string;
            down: string;
        };
    } | {
        drop_index: {
            name: string;
        };
    } | {
        drop_table: {
            name: string;
        };
    } | {
        sql: {
            up: string;
            down?: string | undefined;
            onComplete?: boolean | undefined;
        };
    } | {
        rename_table: {
            from: string;
            to: string;
        };
    } | {
        set_replica_identity: {
            table: string;
            identity: {
                type: string;
                index: string;
            };
        };
    })[];
}>;
type OperationType = (typeof operationTypes)[number];
declare const operationTypes: readonly ["add_column", "alter_column", "create_index", "create_table", "drop_column", "drop_constraint", "drop_index", "drop_table", "sql", "rename_table", "set_replica_identity"];

declare const PGROLL_JSON_SCHEMA_URL = "https://raw.githubusercontent.com/xataio/pgroll/main/schema.json";
declare function generateJSONSchema(): {
    readonly $id: "https://raw.githubusercontent.com/xataio/pgroll/main/schema.json";
    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    readonly title: "JSON Schema for pgroll migrations";
    readonly description: "This JSON schema defines the structure and properties of pgroll migrations.";
    readonly allOf: readonly [{
        readonly $ref: "#/$defs/PgRollMigration";
    }];
    readonly $defs: {
        readonly CheckConstraint: {
            readonly additionalProperties: false;
            readonly description: "Check constraint definition";
            readonly properties: {
                readonly constraint: {
                    readonly description: "Constraint expression";
                    readonly type: "string";
                };
                readonly name: {
                    readonly description: "Name of check constraint";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["constraint", "name"];
            readonly type: "object";
        };
        readonly Column: {
            readonly additionalProperties: false;
            readonly description: "Column definition";
            readonly properties: {
                readonly check: {
                    readonly $ref: "#/$defs/CheckConstraint";
                    readonly description: "Check constraint for the column";
                };
                readonly default: {
                    readonly description: "Default value for the column";
                    readonly type: "string";
                };
                readonly name: {
                    readonly description: "Name of the column";
                    readonly type: "string";
                };
                readonly nullable: {
                    readonly description: "Indicates if the column is nullable";
                    readonly type: "boolean";
                };
                readonly pk: {
                    readonly description: "Indicates if the column is part of the primary key";
                    readonly type: "boolean";
                };
                readonly references: {
                    readonly $ref: "#/$defs/ForeignKeyReference";
                    readonly description: "Foreign key constraint for the column";
                };
                readonly type: {
                    readonly description: "Postgres type of the column";
                    readonly type: "string";
                };
                readonly unique: {
                    readonly description: "Indicates if the column values must be unique";
                    readonly type: "boolean";
                };
                readonly comment: {
                    readonly description: "Postgres comment for the column";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["name", "type"];
            readonly type: "object";
        };
        readonly ForeignKeyReference: {
            readonly additionalProperties: false;
            readonly description: "Foreign key reference definition";
            readonly properties: {
                readonly column: {
                    readonly description: "Name of the referenced column";
                    readonly type: "string";
                };
                readonly name: {
                    readonly description: "Name of the foreign key constraint";
                    readonly type: "string";
                };
                readonly table: {
                    readonly description: "Name of the referenced table";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["column", "name", "table"];
            readonly type: "object";
        };
        readonly OpAddColumn: {
            readonly additionalProperties: false;
            readonly description: "Add column operation";
            readonly properties: {
                readonly column: {
                    readonly $ref: "#/$defs/Column";
                    readonly description: "Column to add";
                };
                readonly table: {
                    readonly description: "Name of the table";
                    readonly type: "string";
                };
                readonly up: {
                    readonly description: "SQL expression for up migration";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["column", "table"];
            readonly type: "object";
        };
        readonly OpAlterColumn: {
            readonly additionalProperties: false;
            readonly description: "Alter column operation";
            readonly properties: {
                readonly check: {
                    readonly $ref: "#/$defs/CheckConstraint";
                    readonly description: "Add check constraint to the column";
                };
                readonly column: {
                    readonly description: "Name of the column";
                    readonly type: "string";
                };
                readonly down: {
                    readonly description: "SQL expression for down migration";
                    readonly type: "string";
                };
                readonly name: {
                    readonly description: "New name of the column (for rename column operation)";
                    readonly type: "string";
                };
                readonly nullable: {
                    readonly description: "Indicates if the column is nullable (for add/remove not null constraint operation)";
                    readonly type: "boolean";
                };
                readonly references: {
                    readonly $ref: "#/$defs/ForeignKeyReference";
                    readonly description: "Add foreign key constraint to the column";
                };
                readonly table: {
                    readonly description: "Name of the table";
                    readonly type: "string";
                };
                readonly type: {
                    readonly description: "New type of the column (for change type operation)";
                    readonly type: "string";
                };
                readonly unique: {
                    readonly $ref: "#/$defs/UniqueConstraint";
                    readonly description: "Add unique constraint to the column";
                };
                readonly up: {
                    readonly description: "SQL expression for up migration";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["table", "column"];
            readonly oneOf: readonly [{
                readonly required: readonly ["up", "down"];
                readonly oneOf: readonly [{
                    readonly required: readonly ["check"];
                }, {
                    readonly required: readonly ["type"];
                }, {
                    readonly required: readonly ["nullable"];
                }, {
                    readonly required: readonly ["unique"];
                }, {
                    readonly required: readonly ["references"];
                }];
                readonly not: {
                    readonly required: readonly ["name"];
                };
            }, {
                readonly required: readonly ["name"];
                readonly not: {
                    readonly anyOf: readonly [{
                        readonly required: readonly ["up"];
                    }, {
                        readonly required: readonly ["down"];
                    }, {
                        readonly required: readonly ["check"];
                    }, {
                        readonly required: readonly ["type"];
                    }, {
                        readonly required: readonly ["nullable"];
                    }, {
                        readonly required: readonly ["unique"];
                    }, {
                        readonly required: readonly ["references"];
                    }];
                };
            }];
            readonly type: "object";
        };
        readonly OpCreateIndex: {
            readonly additionalProperties: false;
            readonly description: "Create index operation";
            readonly properties: {
                readonly columns: {
                    readonly description: "Names of columns on which to define the index";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly type: "array";
                };
                readonly name: {
                    readonly description: "Index name";
                    readonly type: "string";
                };
                readonly table: {
                    readonly description: "Name of table on which to define the index";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["columns", "name", "table"];
            readonly type: "object";
        };
        readonly OpCreateTable: {
            readonly additionalProperties: false;
            readonly description: "Create table operation";
            readonly properties: {
                readonly columns: {
                    readonly items: {
                        readonly $ref: "#/$defs/Column";
                        readonly description: "Columns to add to the table";
                    };
                    readonly type: "array";
                };
                readonly name: {
                    readonly description: "Name of the table";
                    readonly type: "string";
                };
                readonly comment: {
                    readonly description: "Postgres comment for the table";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["columns", "name"];
            readonly type: "object";
        };
        readonly OpDropColumn: {
            readonly additionalProperties: false;
            readonly description: "Drop column operation";
            readonly properties: {
                readonly column: {
                    readonly description: "Name of the column";
                    readonly type: "string";
                };
                readonly down: {
                    readonly description: "SQL expression for down migration";
                    readonly type: "string";
                };
                readonly table: {
                    readonly description: "Name of the table";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["column", "table"];
            readonly type: "object";
        };
        readonly OpDropConstraint: {
            readonly additionalProperties: false;
            readonly description: "Drop constraint operation";
            readonly properties: {
                readonly column: {
                    readonly description: "Name of the column";
                    readonly type: "string";
                };
                readonly down: {
                    readonly description: "SQL expression for down migration";
                    readonly type: "string";
                };
                readonly name: {
                    readonly description: "Name of the constraint";
                    readonly type: "string";
                };
                readonly table: {
                    readonly description: "Name of the table";
                    readonly type: "string";
                };
                readonly up: {
                    readonly description: "SQL expression for up migration";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["column", "down", "name", "table", "up"];
            readonly type: "object";
        };
        readonly OpDropIndex: {
            readonly additionalProperties: false;
            readonly description: "Drop index operation";
            readonly properties: {
                readonly name: {
                    readonly description: "Index name";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["name"];
            readonly type: "object";
        };
        readonly OpDropTable: {
            readonly additionalProperties: false;
            readonly description: "Drop table operation";
            readonly properties: {
                readonly name: {
                    readonly description: "Name of the table";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["name"];
            readonly type: "object";
        };
        readonly OpRawSQL: {
            readonly additionalProperties: false;
            readonly description: "Raw SQL operation";
            readonly properties: {
                readonly down: {
                    readonly default: "";
                    readonly description: "SQL expression for down migration";
                    readonly type: "string";
                };
                readonly up: {
                    readonly description: "SQL expression for up migration";
                    readonly type: "string";
                };
                readonly onComplete: {
                    readonly description: "SQL expression will run on complete step (rather than on start)";
                    readonly type: "boolean";
                    readonly default: false;
                };
            };
            readonly required: readonly ["up"];
            readonly oneOf: readonly [{
                readonly required: readonly ["down"];
            }, {
                readonly required: readonly ["onComplete"];
            }, {
                readonly not: {
                    readonly anyOf: readonly [{
                        readonly required: readonly ["down"];
                    }, {
                        readonly required: readonly ["onComplete"];
                    }];
                };
            }];
            readonly type: "object";
        };
        readonly OpRenameTable: {
            readonly additionalProperties: false;
            readonly description: "Rename table operation";
            readonly properties: {
                readonly from: {
                    readonly description: "Old name of the table";
                    readonly type: "string";
                };
                readonly to: {
                    readonly description: "New name of the table";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["from", "to"];
            readonly type: "object";
        };
        readonly OpSetReplicaIdentity: {
            readonly additionalProperties: false;
            readonly description: "Set replica identity operation";
            readonly properties: {
                readonly identity: {
                    readonly $ref: "#/$defs/ReplicaIdentity";
                    readonly description: "Replica identity to set";
                };
                readonly table: {
                    readonly description: "Name of the table";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["identity", "table"];
            readonly type: "object";
        };
        readonly PgRollOperation: {
            readonly anyOf: readonly [{
                readonly type: "object";
                readonly description: "Add column operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly add_column: {
                        readonly $ref: "#/$defs/OpAddColumn";
                    };
                };
                readonly required: readonly ["add_column"];
            }, {
                readonly type: "object";
                readonly description: "Alter column operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly alter_column: {
                        readonly $ref: "#/$defs/OpAlterColumn";
                    };
                };
                readonly required: readonly ["alter_column"];
            }, {
                readonly type: "object";
                readonly description: "Create index operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly create_index: {
                        readonly $ref: "#/$defs/OpCreateIndex";
                    };
                };
                readonly required: readonly ["create_index"];
            }, {
                readonly type: "object";
                readonly description: "Create table operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly create_table: {
                        readonly $ref: "#/$defs/OpCreateTable";
                    };
                };
                readonly required: readonly ["create_table"];
            }, {
                readonly type: "object";
                readonly description: "Drop column operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly drop_column: {
                        readonly $ref: "#/$defs/OpDropColumn";
                    };
                };
                readonly required: readonly ["drop_column"];
            }, {
                readonly type: "object";
                readonly description: "Drop constraint operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly drop_constraint: {
                        readonly $ref: "#/$defs/OpDropConstraint";
                    };
                };
                readonly required: readonly ["drop_constraint"];
            }, {
                readonly type: "object";
                readonly description: "Drop index operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly drop_index: {
                        readonly $ref: "#/$defs/OpDropIndex";
                    };
                };
                readonly required: readonly ["drop_index"];
            }, {
                readonly type: "object";
                readonly description: "Drop table operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly drop_table: {
                        readonly $ref: "#/$defs/OpDropTable";
                    };
                };
                readonly required: readonly ["drop_table"];
            }, {
                readonly type: "object";
                readonly description: "Raw SQL operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly sql: {
                        readonly $ref: "#/$defs/OpRawSQL";
                    };
                };
                readonly required: readonly ["sql"];
            }, {
                readonly type: "object";
                readonly description: "Rename table operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly rename_table: {
                        readonly $ref: "#/$defs/OpRenameTable";
                    };
                };
                readonly required: readonly ["rename_table"];
            }, {
                readonly type: "object";
                readonly description: "Set replica identity operation";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly set_replica_identity: {
                        readonly $ref: "#/$defs/OpSetReplicaIdentity";
                    };
                };
                readonly required: readonly ["set_replica_identity"];
            }];
        };
        readonly PgRollOperations: {
            readonly items: {
                readonly $ref: "#/$defs/PgRollOperation";
            };
            readonly type: "array";
        };
        readonly PgRollMigration: {
            readonly additionalProperties: false;
            readonly description: "PgRoll migration definition";
            readonly properties: {
                readonly name: {
                    readonly description: "Name of the migration";
                    readonly type: "string";
                };
                readonly operations: {
                    readonly $ref: "#/$defs/PgRollOperations";
                };
            };
            readonly required: readonly ["name", "operations"];
            readonly type: "object";
        };
        readonly ReplicaIdentity: {
            readonly additionalProperties: false;
            readonly description: "Replica identity definition";
            readonly properties: {
                readonly index: {
                    readonly description: "Name of the index to use as replica identity";
                    readonly type: "string";
                };
                readonly type: {
                    readonly description: "Type of replica identity";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["index", "type"];
            readonly type: "object";
        };
        readonly UniqueConstraint: {
            readonly additionalProperties: false;
            readonly description: "Unique constraint definition";
            readonly properties: {
                readonly name: {
                    readonly description: "Name of unique constraint";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["name"];
            readonly type: "object";
        };
    };
};

export { type CheckConstraint, CheckConstraintDefinition, type Column, ColumnDefinition, type ForeignKeyReference, ForeignKeyReferenceDefinition, type OpAddColumn, OpAddColumnDefinition, type OpAlterColumn, OpAlterColumnDefinition, type OpCreateIndex, OpCreateIndexDefinition, type OpCreateTable, OpCreateTableDefinition, type OpDropColumn, OpDropColumnDefinition, type OpDropConstraint, OpDropConstraintDefinition, type OpDropIndex, OpDropIndexDefinition, type OpDropTable, OpDropTableDefinition, type OpRawSQL, OpRawSQLDefinition, type OpRenameTable, OpRenameTableDefinition, type OpSetReplicaIdentity, OpSetReplicaIdentityDefinition, type OperationType, PGROLL_JSON_SCHEMA_URL, type PgRollMigration, PgRollMigrationDefinition, type PgRollOperation, PgRollOperationDefinition, type PgRollOperations, PgRollOperationsDefinition, type ReplicaIdentity, ReplicaIdentityDefinition, type UniqueConstraint, UniqueConstraintDefinition, generateJSONSchema, operationTypes };
